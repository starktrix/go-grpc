// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: src/proto/stream.proto

package stream

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	StreamService_ClientStream_FullMethodName = "/proto.StreamService/ClientStream"
	StreamService_ServerStream_FullMethodName = "/proto.StreamService/ServerStream"
	StreamService_BiStream_FullMethodName     = "/proto.StreamService/BiStream"
)

// StreamServiceClient is the client API for StreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamServiceClient interface {
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (StreamService_ClientStreamClient, error)
	ServerStream(ctx context.Context, in *ServerStreamStart, opts ...grpc.CallOption) (StreamService_ServerStreamClient, error)
	BiStream(ctx context.Context, opts ...grpc.CallOption) (StreamService_BiStreamClient, error)
}

type streamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamServiceClient(cc grpc.ClientConnInterface) StreamServiceClient {
	return &streamServiceClient{cc}
}

func (c *streamServiceClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (StreamService_ClientStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamService_ServiceDesc.Streams[0], StreamService_ClientStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceClientStreamClient{ClientStream: stream}
	return x, nil
}

type StreamService_ClientStreamClient interface {
	Send(*StreamValue) error
	CloseAndRecv() (*ClientStreamEnd, error)
	grpc.ClientStream
}

type streamServiceClientStreamClient struct {
	grpc.ClientStream
}

func (x *streamServiceClientStreamClient) Send(m *StreamValue) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamServiceClientStreamClient) CloseAndRecv() (*ClientStreamEnd, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ClientStreamEnd)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamServiceClient) ServerStream(ctx context.Context, in *ServerStreamStart, opts ...grpc.CallOption) (StreamService_ServerStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamService_ServiceDesc.Streams[1], StreamService_ServerStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceServerStreamClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamService_ServerStreamClient interface {
	Recv() (*StreamValue, error)
	grpc.ClientStream
}

type streamServiceServerStreamClient struct {
	grpc.ClientStream
}

func (x *streamServiceServerStreamClient) Recv() (*StreamValue, error) {
	m := new(StreamValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamServiceClient) BiStream(ctx context.Context, opts ...grpc.CallOption) (StreamService_BiStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamService_ServiceDesc.Streams[2], StreamService_BiStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceBiStreamClient{ClientStream: stream}
	return x, nil
}

type StreamService_BiStreamClient interface {
	Send(*StreamValue) error
	Recv() (*StreamValue, error)
	grpc.ClientStream
}

type streamServiceBiStreamClient struct {
	grpc.ClientStream
}

func (x *streamServiceBiStreamClient) Send(m *StreamValue) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamServiceBiStreamClient) Recv() (*StreamValue, error) {
	m := new(StreamValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamServiceServer is the server API for StreamService service.
// All implementations must embed UnimplementedStreamServiceServer
// for forward compatibility
type StreamServiceServer interface {
	ClientStream(StreamService_ClientStreamServer) error
	ServerStream(*ServerStreamStart, StreamService_ServerStreamServer) error
	BiStream(StreamService_BiStreamServer) error
	mustEmbedUnimplementedStreamServiceServer()
}

// UnimplementedStreamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStreamServiceServer struct {
}

func (UnimplementedStreamServiceServer) ClientStream(StreamService_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedStreamServiceServer) ServerStream(*ServerStreamStart, StreamService_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedStreamServiceServer) BiStream(StreamService_BiStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BiStream not implemented")
}
func (UnimplementedStreamServiceServer) mustEmbedUnimplementedStreamServiceServer() {}

// UnsafeStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamServiceServer will
// result in compilation errors.
type UnsafeStreamServiceServer interface {
	mustEmbedUnimplementedStreamServiceServer()
}

func RegisterStreamServiceServer(s grpc.ServiceRegistrar, srv StreamServiceServer) {
	s.RegisterService(&StreamService_ServiceDesc, srv)
}

func _StreamService_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServiceServer).ClientStream(&streamServiceClientStreamServer{ServerStream: stream})
}

type StreamService_ClientStreamServer interface {
	SendAndClose(*ClientStreamEnd) error
	Recv() (*StreamValue, error)
	grpc.ServerStream
}

type streamServiceClientStreamServer struct {
	grpc.ServerStream
}

func (x *streamServiceClientStreamServer) SendAndClose(m *ClientStreamEnd) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamServiceClientStreamServer) Recv() (*StreamValue, error) {
	m := new(StreamValue)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StreamService_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServerStreamStart)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServiceServer).ServerStream(m, &streamServiceServerStreamServer{ServerStream: stream})
}

type StreamService_ServerStreamServer interface {
	Send(*StreamValue) error
	grpc.ServerStream
}

type streamServiceServerStreamServer struct {
	grpc.ServerStream
}

func (x *streamServiceServerStreamServer) Send(m *StreamValue) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamService_BiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServiceServer).BiStream(&streamServiceBiStreamServer{ServerStream: stream})
}

type StreamService_BiStreamServer interface {
	Send(*StreamValue) error
	Recv() (*StreamValue, error)
	grpc.ServerStream
}

type streamServiceBiStreamServer struct {
	grpc.ServerStream
}

func (x *streamServiceBiStreamServer) Send(m *StreamValue) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamServiceBiStreamServer) Recv() (*StreamValue, error) {
	m := new(StreamValue)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamService_ServiceDesc is the grpc.ServiceDesc for StreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.StreamService",
	HandlerType: (*StreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStream",
			Handler:       _StreamService_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStream",
			Handler:       _StreamService_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BiStream",
			Handler:       _StreamService_BiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "src/proto/stream.proto",
}
